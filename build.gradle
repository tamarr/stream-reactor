/*
 * Copyright 2017 Datamountaineer.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import de.undercouch.gradle.tasks.download.Download

buildscript {
    repositories {
        jcenter()
        maven {
            url 'https://plugins.gradle.org/m2/'
        }
    }
    dependencies {
        classpath 'com.github.maiflai:gradle-scalatest:0.14'
        classpath 'net.researchgate:gradle-release:2.3.4'
        classpath "org.github.ngbinh.scalastyle:gradle-scalastyle-plugin_2.11:0.8.2"
        classpath 'com.github.jengelman.gradle.plugins:shadow:1.2.3'
        classpath 'de.undercouch:gradle-download-task:3.1.2'
    }
}

// gradle 3.0 intellj fixes
ScalaCompileOptions.metaClass.daemonServer = true
ScalaCompileOptions.metaClass.fork = true
ScalaCompileOptions.metaClass.useAnt = false
ScalaCompileOptions.metaClass.useCompileDaemon = false


allprojects {
    group = 'com.datamountaineer'
    version = project.version
    description = "stream-reactor"
    apply plugin: 'java'
    apply plugin: 'scala'
    apply plugin: 'maven'
    apply plugin: 'com.github.maiflai.scalatest'
    apply plugin: 'net.researchgate.release'
    apply plugin: 'scalaStyle'
    apply plugin: 'com.github.johnrengelman.shadow'
    apply plugin: 'de.undercouch.download'

    sourceCompatibility = 1.8
    targetCompatibility = 1.8

    ext {
        scalaMajorVersion = '2.11'
        scala = '2.11.7'
        scalaCheck = '1.11.1'
        scalaTest = '2.2.6'
        junit = '4.11'
        scalaLoggingVersion = '2.1.2'
        mockitoVersion = '1.10.19'
        jacksonDatabind = '2.7.0'
        avroVersion = '1.7.7'
        jacksonxmlVersion = '2.6.5'
        slf4jVersion = "1.7.7"
        avro4sVersion = "1.6.0"
        json4sVersion = "3.3.0"
        kiteMiniClusterVersion = "1.1.0"
        gsonVersion = "2.6.2"
        dataMountaineerKCQLVersion = "1.0.5"
        akkaVersion = "2.4.10"
        connectCLIVersion = "1.0.1"

        // The following 4 need to align to compile against a particular version
        confluentVersion = '3.2.0'
        kafkaVersion = '0.10.2.0'
        dataMountaineerCommonVersion = "0.7.8"
        dataMountaineerTestKitVersion = "0.5"

        // For 3.1.x versions use
        // confluentVersion = '3.1.2'
        // kafkaVersion = '0.10.1.1'
        // dataMountaineerCommonVersion = "0.7.0"
        // dataMountaineerTestKitVersion = "0.4"

        //release
        rootRelease = "${project.rootDir}/release/"
        versionDir = "${rootRelease}/${project.description}-${project.version}-${confluentVersion}"
        binDir = "${versionDir}/bin"
        confDir = "${versionDir}/conf"
        libsDir = "${versionDir}/libs"
        tarName = "${project.description}-${project.version}-${confluentVersion}.tar.gz"
        cliUrl = "https://github.com/datamountaineer/kafka-connect-tools/releases/download/v${connectCLIVersion}/kafka-connect-cli-${connectCLIVersion}-all.jar"
        srCliUrlDarwin = "https://github.com/datamountaineer/schema-registry/releases/download/0.0.1/sr-cli-osx"
        srCliUrlLinux = "https://github.com/datamountaineer/schema-registry/releases/download/0.0.1/sr-cli-linux"
    }

    repositories {
        mavenLocal()
        mavenCentral()
        maven { url "http://packages.confluent.io/maven/" }
        maven { url "http://repo.typesafe.com/typesafe/releases/" }
        maven { url "https://repository.cloudera.com/artifactory/cloudera-repos/" }
        maven { url "http://conjars.org/repo" }
        maven {
            url 'http://dl.bintray.com/andsel/maven/'
        }
    }

    shadowJar {
        configurations = [project.configurations.runtime]
        baseName = "${project.name}-${project.version}-${confluentVersion}-all"
        classifier = null
        version = null

        zip64 true

        mergeServiceFiles {
            exclude "META-INF/*.SF"
            exclude "META-INF/*.DSA"
            exclude "META-INF/*.RSA"
        }

        transform(com.github.jengelman.gradle.plugins.shadow.transformers.AppendingTransformer) {
            resource = 'reference.conf'
        }
        dependencies {
            if (project.name != "kafka-socket-streamer") {
                exclude(dependency("org.apache.avro:.*"))
                exclude(dependency("org.apache.kafka:.*"))
                exclude(dependency("io.confluent:.*"))
                exclude(dependency("org.apache.kafka:.*"))
                exclude(dependency("org.apache.zookeeper:.*"))
            }
        }
    }

    dependencies {
        compile "org.scala-lang:scala-library:$scala"
        compile "org.scala-lang:scala-compiler:$scala"
        compile "com.typesafe.scala-logging:scala-logging-slf4j_$scalaMajorVersion:$scalaLoggingVersion"
        compile("com.datamountaineer:kcql:$dataMountaineerKCQLVersion") {
            exclude group: "com.google.guava", module: "guava"
        }
        compile("com.datamountaineer:kafka-connect-common:$dataMountaineerCommonVersion")

        compile "org.apache.kafka:connect-json:$kafkaVersion"
        compile "io.confluent:kafka-connect-avro-converter:$confluentVersion"
        compile "io.confluent:kafka-schema-registry:$confluentVersion"
        compile "org.apache.avro:avro:$avroVersion"

        testCompile "org.mockito:mockito-core:$mockitoVersion"
        testCompile "org.scalacheck:scalacheck_$scalaMajorVersion:$scalaCheck"
        testCompile "org.scalatest:scalatest_$scalaMajorVersion:$scalaTest"
        testCompile "junit:junit:$junit"

        testRuntime 'org.pegdown:pegdown:1.1.0'
    }

    test {
        maxParallelForks = 1
        minHeapSize '256m'
        maxHeapSize '2048m'
    }

    task testJar(type: Jar, dependsOn: testClasses) {
        baseName = "test-${project.archivesBaseName}"
        from sourceSets.test.output
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar) {
        classifier = 'javadoc'
        from javadoc
    }

    task scaladocJar(type: Jar) {
        classifier = 'scaladoc'
        from '../LICENSE'
        from scaladoc
    }

    tasks.withType(Tar) {
        compression Compression.GZIP
        extension = 'tgz'
    }

    task compile(dependsOn: 'compileScala')

    task fatJar(dependsOn: [clean, test, shadowJar])

    task collectJars(type: Copy) {
        into "${buildDir}/libs-dependencies"
        from configurations.runtime
    }

    scalaStyle {
        configLocation = "${project.projectDir}/../style/scalastyle_config.xml"
        includeTestSourceDirectory = false
        source = "src/main/scala"
        testSource = "src/test/scala"
    }

    task collectFatJar(type: Copy, dependsOn: [fatJar]) {
        from "${buildDir}/libs"
        into libsDir
    }
}

task prepareReleaseDir(type: Copy) {
    doFirst {
        def root = new File(rootRelease)
        def version = new File(versionDir)
        def bin = new File(binDir)
        def libs = new File(libsDir)
        def conf = new File(confDir)

        root.deleteDir()
        root.mkdirs()
        version.mkdirs()
        libs.mkdirs()
        conf.mkdirs()
        bin.mkdirs()
    }
    from("${project.rootDir}") {
        include "README.md"
        include "LICENSE"
    }
    into versionDir
}

task downloadCli(type: Download, dependsOn: prepareReleaseDir) {
    overwrite false
    src cliUrl
    dest binDir
}

task downloadSchemaCli(type: Download, dependsOn: prepareReleaseDir) {
    overwrite false
    src([srCliUrlDarwin, srCliUrlLinux])
    dest binDir
}


task collectConfs(type: Copy, dependsOn: prepareReleaseDir) {
    from "${project.rootDir}/conf"
    into confDir
}

task collectBin(type: Copy, dependsOn: prepareReleaseDir) {
    from("${project.rootDir}/bin") {
        filter { it.replaceAll('@@CLI_VERSION@@', connectCLIVersion) }
        filter { it.replaceAll('@@STREAM_REACTOR_VERSION@@', "${project.version}-${confluentVersion}") }
    }
    into binDir
}

task prepareRelease(dependsOn: [downloadCli, downloadSchemaCli, collectConfs, collectBin]) {
    dependsOn subprojects.collectFatJar

    doLast {
        exec {
            commandLine "chmod", "+x", "${binDir}/sr-cli-osx"
            commandLine "chmod", "+x", "${binDir}/sr-cli-linux"
        }
    }
}

task tar(type: Tar, dependsOn: prepareRelease) {
    from rootRelease
    exclude "**.gz"
    archiveName = tarName
    destinationDir = file(rootRelease)
    compression = Compression.GZIP
}
